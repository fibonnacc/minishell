!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/helfatih/Documents/minishell/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
add_token	Handle_token.c	/^void	add_token(t_token **token, t_token *new_token)$/;"	f	typeref:typename:void
append_arg	Helper.c	/^void	append_arg(t_command *cmd, char *str)$/;"	f	typeref:typename:void
built_in	excute.c	/^bool	built_in(char *cmd)$/;"	f	typeref:typename:bool
check_somthing	utils.c	/^bool  check_somthing(char *word)$/;"	f	typeref:typename:bool
con	tools.c	/^bool  con(char *str)$/;"	f	typeref:typename:bool
count_args	Helper.c	/^int count_args(char **av)$/;"	f	typeref:typename:int
creat_token	Handle_token.c	/^t_token *creat_token(char *line, t_token_type type, bool  should_join)$/;"	f	typeref:typename:t_token *
create_command	Handle_command.c	/^t_command	*create_command()$/;"	f	typeref:typename:t_command *
execute_command	main.c	/^void execute_command(t_command *cmd, char **env)$/;"	f	typeref:typename:void
expand_env	Handle_command.c	/^char	*expand_env(char *str)$/;"	f	typeref:typename:char *
flaging	tools.c	/^bool  flaging(char *str)$/;"	f	typeref:typename:bool
free_2D_array	excute.c	/^void	free_2D_array(char **str)$/;"	f	typeref:typename:void
free_array	Helper.c	/^void  free_array(char **arr)$/;"	f	typeref:typename:void
free_cmd	Helper.c	/^void	free_cmd(t_command *cmd)$/;"	f	typeref:typename:void
free_token	Helper.c	/^void	free_token(t_token **token)$/;"	f	typeref:typename:void
ft_meta_c	Handle_token.c	/^bool  ft_meta_c(char c)$/;"	f	typeref:typename:bool
ft_space	Handle_token.c	/^bool  ft_space(char c)$/;"	f	typeref:typename:bool
g_value	main.c	/^int	g_value = 0;$/;"	v	typeref:typename:int
get_command	excute.c	/^char *get_command(char *cmd, char **env)$/;"	f	typeref:typename:char *
get_path_display	prompt.c	/^static char	*get_path_display(void)$/;"	f	typeref:typename:char *	file:
get_token_type	main.c	/^t_token_type get_token_type(char *str)$/;"	f	typeref:typename:t_token_type
get_user_display	prompt.c	/^static char	*get_user_display(void)$/;"	f	typeref:typename:char *	file:
handle_dollar	utils.c	/^void	handle_dollar(t_token **token, char *line, int *i, int *start, int *exit)$/;"	f	typeref:typename:void
handle_heredoc	meta_char.c	/^int	handle_heredoc(t_token **current, t_command *cmd, t_command *first_cmd)$/;"	f	typeref:typename:int
handle_pipe	meta_char.c	/^int	handle_pipe(t_token **current, t_command **current_cmd, t_command *first_cmd)$/;"	f	typeref:typename:int
handle_quote	Handle_token.c	/^void	handle_quote(bool	*in_quot ,char *quot_char, int *i, char *line)$/;"	f	typeref:typename:void
handle_redir_append	meta_char.c	/^int	handle_redir_append(t_token **current, t_command *cmd, t_command *first_cmd)$/;"	f	typeref:typename:int
handle_redir_in	meta_char.c	/^int	handle_redir_in(t_token **current, t_command *cmd, t_command *first_cmd)$/;"	f	typeref:typename:int
handle_redir_out	meta_char.c	/^int	handle_redir_out(t_token **current, t_command *cmd, t_command *first_cmd)$/;"	f	typeref:typename:int
handle_some_cases	utils.c	/^void	handle_some_cases(t_token **token, char *line, int *i, int *start, int *exit)$/;"	f	typeref:typename:void
handle_special_quot	utils.c	/^void	handle_special_quot(t_token **token, char *line, int *i, int *start, int *exit)$/;"	f	typeref:typename:void
handle_speciale_token	Handle_token.c	/^int	handle_speciale_token(t_token **token, char *line, int i)$/;"	f	typeref:typename:int
handle_white_spaces	utils.c	/^void	handle_white_spaces(t_token **token, char *line, int *i, int *start, int *exit)$/;"	f	typeref:typename:void
handle_word_token	Handle_token.c	/^void	handle_word_token(t_token **token, int start, char *line, int *i, int *exit)$/;"	f	typeref:typename:void
init_var	tools.c	/^void  init_var(char *str, size_t	*i, size_t *j,size_t *old_size, bool *condition, bool *flag)$/;"	f	typeref:typename:void
init_var2	Handle_token.c	/^void  init_var2(int *start, int *i, bool *should_join)$/;"	f	typeref:typename:void
init_variables	Handle_token.c	/^void	init_variables(char *str, int *i, int *j, bool *in_quotes, char *quote_char, size_t *len, c/;"	f	typeref:typename:void
is_closed_quotes	Handle_token.c	/^bool is_closed_quotes(char *str)$/;"	f	typeref:typename:bool
is_space	Helper.c	/^int	is_space(char c)$/;"	f	typeref:typename:int
join_nodes	main.c	/^void join_nodes(t_token **token)$/;"	f	typeref:typename:void
lexe_with_space	Handle_token.c	/^void  lexe_with_space(t_token **token, int *start, int *i, char *word)$/;"	f	typeref:typename:void
logic_of_meta	main.c	/^bool  logic_of_meta(t_token *cmd)$/;"	f	typeref:typename:bool
main	main.c	/^int main(int ac, char **av, char **env)$/;"	f	typeref:typename:int
make_exit	main.c	/^int  make_exit(char *str)$/;"	f	typeref:typename:int
make_like_bash	tools.c	/^void  make_like_bash(char *result, char *valeur, size_t *j)$/;"	f	typeref:typename:void
make_list	Handle_token.c	/^void make_list(char *word, t_token **token)$/;"	f	typeref:typename:void
make_prompt	main.c	/^void make_prompt(char **env)$/;"	f	typeref:typename:void
make_the_envirement	Handle_command.c	/^void  make_the_envirement(char **result, char *valeur, size_t *old_size, size_t *new_size, bool /;"	f	typeref:typename:void
manual_realloc	tools.c	/^char	*manual_realloc(char *old, size_t len)$/;"	f	typeref:typename:char *
my_echo	excute.c	/^void	my_echo(char **args)$/;"	f	typeref:typename:void
my_handler	main.c	/^void my_handler(int sig)$/;"	f	typeref:typename:void
parsing_command	Handle_command.c	/^t_command *parsing_command(t_token *token)$/;"	f	typeref:typename:t_command *
print_commands	print.c	/^void print_commands(t_command *cmd)$/;"	f	typeref:typename:void
print_token	print.c	/^void print_token(t_token *token)$/;"	f	typeref:typename:void
promt	prompt.c	/^char	*promt(void)$/;"	f	typeref:typename:char *
remove_quotes	Handle_token.c	/^char *remove_quotes(char *str)$/;"	f	typeref:typename:char *
special_character	Handle_token.c	/^bool	special_character(char *str)$/;"	f	typeref:typename:bool
split_var	Handle_command.c	/^char *split_var(size_t *i, char *str, size_t *start)$/;"	f	typeref:typename:char *
store_and_increment	main.c	/^void  store_and_increment(char *str, int *i, char *buffer, int *j)$/;"	f	typeref:typename:void
tokenize	main.c	/^t_token	*tokenize(char *line, int *exit)$/;"	f	typeref:typename:t_token *
